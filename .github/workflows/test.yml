name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        neovim: [stable, nightly]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Neovim
      uses: rhysd/action-setup-nvim@v1
      with:
        neovim: true
        version: ${{ matrix.neovim }}
    
    - name: Install dependencies
      run: |
        # Install ripgrep for grep functionality
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y ripgrep fd-find
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install ripgrep fd
        fi
    
    - name: Run tests
      run: |
        cd $HOME
        git clone ${{ github.workspace }} .config/nvim
        cd .config/nvim
        ./tests/run_tests.sh
    
    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.neovim }}
        path: |
          ~/.local/state/nvim/*.log
          ~/.local/share/nvim/*.log

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install luacheck
      run: |
        sudo apt-get update
        sudo apt-get install -y lua5.3 luarocks
        sudo luarocks install luacheck
    
    - name: Lint Lua files
      run: |
        luacheck lua/ --globals vim --no-unused-args --no-redefined

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Neovim
      uses: rhysd/action-setup-nvim@v1
      with:
        neovim: true
        version: stable
    
    - name: Measure startup time
      run: |
        cd $HOME
        git clone ${{ github.workspace }} .config/nvim
        
        # Measure startup time
        for i in {1..10}; do
          nvim --headless -c "quit" --startuptime startup${i}.log
        done
        
        # Calculate average
        awk '/NVIM STARTED/ {print $1}' startup*.log | \
          awk '{sum+=$1; count++} END {printf "Average startup time: %.2f ms\n", sum/count}'
        
        # Fail if startup is too slow (>200ms)
        AVG=$(awk '/NVIM STARTED/ {print $1}' startup*.log | \
          awk '{sum+=$1; count++} END {print int(sum/count)}')
        
        if [ "$AVG" -gt 200 ]; then
          echo "Startup time too slow: ${AVG}ms (threshold: 200ms)"
          exit 1
        fi